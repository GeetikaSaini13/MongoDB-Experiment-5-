// CODE FOR src/models/product.js\

const mongoose = require("mongoose");

const variantSchema = new mongoose.Schema({
  color: String,
  size: String,
  stock: Number
});

const productSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  },
  price: Number,
  category: String,
  variants: [variantSchema]
}, { timestamps: true });

module.exports = mongoose.model("Product", productSchema);



// CODE FOR src/app.js
const express = require("express");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");
const Product = require("./models/product");

const app = express();
app.use(bodyParser.json());

const PORT = 3000;
const MONGO_URI = "mongodb://127.0.0.1:27017/ecommerceDB";

// Connect to MongoDB
mongoose.connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log("MongoDB connected"))
  .catch(err => console.log(err));

// Insert sample products
app.get("/insert-sample", async (req, res) => {
  try {
    const sampleProducts = [
      {
        name: "T-Shirt",
        price: 20,
        category: "Apparel",
        variants: [
          { color: "Red", size: "M", stock: 10 },
          { color: "Blue", size: "L", stock: 5 }
        ]
      },
      {
        name: "Sneakers",
        price: 50,
        category: "Footwear",
        variants: [
          { color: "Black", size: "42", stock: 7 },
          { color: "White", size: "40", stock: 3 }
        ]
      }
    ];

    await Product.insertMany(sampleProducts);
    res.send("Sample products inserted successfully!");
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Get all products
app.get("/products", async (req, res) => {
  try {
    const products = await Product.find();
    res.json(products);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Get products by category
app.get("/products/category/:category", async (req, res) => {
  try {
    const products = await Product.find({ category: req.params.category });
    res.json(products);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Get only variant details
app.get("/products/:id/variants", async (req, res) => {
  try {
    const product = await Product.findById(req.params.id, "variants");
    if (!product) return res.status(404).json({ error: "Product not found" });
    res.json(product.variants);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
